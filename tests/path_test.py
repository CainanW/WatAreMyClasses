import unittest
import os.path, sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir)) # black magic because imports from parents are strange.

from calc import pathFinder_Threaded

class fakeNodeCollection:
	edges=[]
	vertices=[]

class TestPath(unittest.TestCase):

	#def test_basics_dist(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",4),("1090","4273",10)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.dist, {'4273': {'4273': 0, '1040': 14, '1090': 10}, '1040': {'4273': 14, '1040': 0, '1090': 4}, '1090': {'4273': 10, '1040': 4, '1090': 0}})
	#def test_basics_nex(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",4),("1090","4273",10)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.nex, {'4273': {'1040': '1090', '1090': '1090'}, '1040': {'4273': '1090', '1090': '1090'}, '1090': {'4273': '4273', '1040': '1040'}})
	#def test_complex_dist(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1040","4092",30),("4092","2034",20),("1090","3024",50)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.dist, {'4092': {'4092': 0, '3024': 120, '1040': 30, '1090': 70, '2034': 20}, '3024': {'4092': 120, '3024': 0, '1040': 90, '1090': 50, '2034': 140}, '1040': {'4092': 30, '2034': 50, '1090': 40, '3024': 90, '1040': 0}, '1090': {'1090': 0, '4092': 70, '1040': 40, '3024': 50, '2034': 90}, '2034': {'4092': 20, '1040': 50, '1090': 90, '3024': 140, '2034': 0}})
	#def test_complex_nex(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1040","4092",30),("4092","2034",20),("1090","3024",50)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.nex, {'4092': {'3024': '1040', '1040': '1040', '1090': '1040', '2034': '2034'}, '3024': {'4092': '1090', '1040': '1090', '1090': '1090', '2034': '1090'}, '1040': {'4092': '4092', '2034': '4092', '1090': '1090', '3024': '1090'}, '1090': {'4092': '1040', '1040': '1040', '3024': '3024', '2034': '1040'}, '2034': {'4092': '4092', '1040': '4092', '1090': '4092', '3024': '4092'}})
	def test_complex_path(self):
		fnc=fakeNodeCollection()
		fnc.edges=[("1040","1090",40),("1040","4092",30),("4092","2034",20),("1090","3024",50)]
		pF=pathFinder_Threaded(fnc)
		pF.build(test=True)
		self.assertEqual(pF.findPath("2034","3024"), ["2034","4092","1040","1090","3024"])
	#def test_nine_dist(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1040","4092",30),("4092","2034",20),("1090","3024",50),("3024","999",10),("3024","4399",50),("4399","9083",90),("4092","301",90),("301","394",29)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.dist,{'4092': {'4399': 170, '1040': 30, '1090': 70, '4092': 0, '9083': 260, '3024': 120, '999': 130, '2034': 20, '301': 90, '394': 119}, '1040': {'4092': 30, '1040': 0, '1090': 40, '4399': 140, '9083': 230, '3024': 90, '999': 100, '2034': 50, '301': 120, '394': 149}, '1090': {'4092': 70, '1040': 40, '1090': 0, '4399': 100, '9083': 190, '3024': 50, '999': 60, '2034': 90, '301': 160, '394': 189}, '4399': {'4092': 170, '1040': 140, '1090': 100, '4399': 0, '9083': 90, '3024': 50, '999': 60, '2034': 190, '301': 260, '394': 289}, '9083': {'4092': 260, '1040': 230, '1090': 190, '4399': 90, '301': 350, '3024': 140, '999': 150, '9083': 0, '2034': 280, '394': 379}, '3024': {'4092': 120, '1040': 90, '1090': 50, '4399': 50, '9083': 140, '394': 239, '999': 10, '2034': 140, '3024': 0, '301': 210}, '999': {'4092': 130, '1040': 100, '1090': 60, '4399': 60, '301': 220, '3024': 10, '9083': 150, '999': 0, '2034': 150, '394': 249}, '2034': {'4092': 20, '1040': 50, '1090': 90, '4399': 190, '9083': 280, '3024': 140, '999': 150, '2034': 0, '301': 110, '394': 139}, '301': {'4092': 90, '1040': 120, '1090': 160, '4399': 260, '9083': 350, '301': 0, '3024': 210, '999': 220, '2034': 110, '394': 29}, '394': {'4092': 119, '1040': 149, '1090': 189, '4399': 289, '9083': 379, '3024': 239, '999': 249, '2034': 139, '301': 29, '394': 0}})
	#def test_nine_nex(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1040","4092",30),("4092","2034",20),("1090","3024",50),("3024","999",10),("3024","4399",50),("4399","9083",90),("4092","301",90),("301","394",29)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.nex,{'4092': {'4399': '1040', '1040': '1040', '1090': '1040', '9083': '1040', '3024': '1040', '999': '1040', '2034': '2034', '301': '301', '394': '301'}, '1040': {'4092': '4092', '1090': '1090', '4399': '1090', '9083': '1090', '3024': '1090', '999': '1090', '2034': '4092', '301': '4092', '394': '4092'}, '1090': {'4092': '1040', '1040': '1040', '4399': '3024', '9083': '3024', '3024': '3024', '999': '3024', '2034': '1040', '301': '1040', '394': '1040'}, '4399': {'4092': '3024', '1040': '3024', '1090': '3024', '9083': '9083', '3024': '3024', '999': '3024', '2034': '3024', '301': '3024', '394': '3024'}, '9083': {'4092': '4399', '1040': '4399', '1090': '4399', '4399': '4399', '301': '4399', '3024': '4399', '999': '4399', '2034': '4399', '394': '4399'}, '3024': {'4092': '1090', '1040': '1090', '1090': '1090', '4399': '4399', '9083': '4399', '394': '1090', '999': '999', '2034': '1090', '301': '1090'}, '999': {'4092': '3024', '1040': '3024', '1090': '3024', '4399': '3024', '301': '3024', '3024': '3024', '9083': '3024', '2034': '3024', '394': '3024'}, '2034': {'4092': '4092', '1040': '4092', '1090': '4092', '4399': '4092', '9083': '4092', '3024': '4092', '999': '4092', '301': '4092', '394': '4092'}, '301': {'4092': '4092', '1040': '4092', '1090': '4092', '4399': '4092', '9083': '4092', '3024': '4092', '999': '4092', '2034': '4092', '394': '394'}, '394': {'4092': '301', '1040': '301', '1090': '301', '4399': '301', '9083': '301', '3024': '301', '999': '301', '2034': '301', '301': '301'}})
	#def test_13_dist(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1090","3312",50),("3312","35132",90),("35132","331j2",80),("1040","4092",30),("4092","2034",20),("1090","3024",50),("3024","999",10),("3024","4399",50),("4399","9083",90),("4092","301",90),("301","394",29)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.dist,{'4092': {'4399': 170, '331j2': 290, '1040': 30, '1090': 70, '4092': 0, '9083': 260, '3024': 120, '999': 130, '2034': 20, '35132': 210, '301': 90, '3312': 120, '394': 119}, '331j2': {'4092': 290, '331j2': 0, '1040': 260, '1090': 220, '4399': 320, '9083': 410, '3024': 270, '999': 280, '2034': 310, '35132': 80, '301': 380, '3312': 170, '394': 409}, '1040': {'4092': 30, '331j2': 260, '1040': 0, '1090': 40, '4399': 140, '9083': 230, '3024': 90, '999': 100, '2034': 50, '35132': 180, '301': 120, '3312': 90, '394': 149}, '1090': {'4092': 70, '331j2': 220, '1040': 40, '1090': 0, '4399': 100, '9083': 190, '3024': 50, '999': 60, '2034': 90, '35132': 140, '301': 160, '3312': 50, '394': 189}, '4399': {'4092': 170, '331j2': 320, '1040': 140, '1090': 100, '4399': 0, '9083': 90, '3024': 50, '999': 60, '2034': 190, '35132': 240, '301': 260, '3312': 150, '394': 289}, '9083': {'4092': 260, '331j2': 410, '1040': 230, '1090': 190, '4399': 90, '301': 350, '3024': 140, '999': 150, '2034': 280, '9083': 0, '35132': 330, '394': 379, '3312': 240}, '3024': {'4092': 120, '331j2': 270, '1040': 90, '1090': 50, '4399': 50, '9083': 140, '394': 239, '999': 10, '2034': 140, '35132': 190, '3024': 0, '301': 210, '3312': 100}, '999': {'4092': 130, '331j2': 280, '1040': 100, '1090': 60, '4399': 60, '301': 220, '3024': 10, '9083': 150, '2034': 150, '999': 0, '35132': 200, '394': 249, '3312': 110}, '2034': {'4092': 20, '331j2': 310, '1040': 50, '1090': 90, '4399': 190, '9083': 280, '3024': 140, '999': 150, '2034': 0, '35132': 230, '301': 110, '3312': 140, '394': 139}, '35132': {'4092': 210, '331j2': 80, '1040': 180, '1090': 140, '4399': 240, '9083': 330, '3024': 190, '999': 200, '2034': 230, '35132': 0, '301': 300, '3312': 90, '394': 329}, '301': {'4092': 90, '331j2': 380, '1040': 120, '1090': 160, '4399': 260, '9083': 350, '301': 0, '3024': 210, '999': 220, '2034': 110, '35132': 300, '394': 29, '3312': 210}, '3312': {'4092': 120, '331j2': 170, '1040': 90, '1090': 50, '4399': 150, '9083': 240, '3024': 100, '999': 110, '2034': 140, '35132': 90, '301': 210, '3312': 0, '394': 239}, '394': {'4092': 119, '331j2': 409, '1040': 149, '1090': 189, '4399': 289, '9083': 379, '3024': 239, '999': 249, '2034': 139, '35132': 329, '301': 29, '3312': 239, '394': 0}})
	#def test_13_nex(self):
	#	fnc=fakeNodeCollection()
	#	fnc.edges=[("1040","1090",40),("1090","3312",50),("3312","35132",90),("35132","331j2",80),("1040","4092",30),("4092","2034",20),("1090","3024",50),("3024","999",10),("3024","4399",50),("4399","9083",90),("4092","301",90),("301","394",29)]
	#	pF=pathFinder_Threaded(fnc)
	#	pF.build(test=True)
	#	self.assertEqual(pF.nex,{'4092': {'4399': '1040', '331j2': '1040', '1040': '1040', '1090': '1040', '9083': '1040', '3024': '1040', '999': '1040', '2034': '2034', '35132': '1040', '301': '301', '3312': '1040', '394': '301'}, '331j2': {'4092': '35132', '1040': '35132', '1090': '35132', '4399': '35132', '9083': '35132', '3024': '35132', '999': '35132', '2034': '35132', '35132': '35132', '301': '35132', '3312': '35132', '394': '35132'}, '1040': {'4092': '4092', '331j2': '1090', '1090': '1090', '4399': '1090', '9083': '1090', '3024': '1090', '999': '1090', '2034': '4092', '35132': '1090', '301': '4092', '3312': '1090', '394': '4092'}, '1090': {'4092': '1040', '331j2': '3312', '1040': '1040', '4399': '3024', '9083': '3024', '3024': '3024', '999': '3024', '2034': '1040', '35132': '3312', '301': '1040', '3312': '3312', '394': '1040'}, '4399': {'4092': '3024', '331j2': '3024', '1040': '3024', '1090': '3024', '9083': '9083', '3024': '3024', '999': '3024', '2034': '3024', '35132': '3024', '301': '3024', '3312': '3024', '394': '3024'}, '9083': {'4092': '4399', '331j2': '4399', '1040': '4399', '1090': '4399', '4399': '4399', '301': '4399', '3024': '4399', '999': '4399', '2034': '4399', '35132': '4399', '394': '4399', '3312': '4399'}, '3024': {'4092': '1090', '331j2': '1090', '1040': '1090', '1090': '1090', '4399': '4399', '9083': '4399', '394': '1090', '999': '999', '2034': '1090', '35132': '1090', '301': '1090', '3312': '1090'}, '999': {'4092': '3024', '331j2': '3024', '1040': '3024', '1090': '3024', '4399': '3024', '301': '3024', '3024': '3024', '9083': '3024', '2034': '3024', '35132': '3024', '394': '3024', '3312': '3024'}, '2034': {'4092': '4092', '331j2': '4092', '1040': '4092', '1090': '4092', '4399': '4092', '9083': '4092', '3024': '4092', '999': '4092', '35132': '4092', '301': '4092', '3312': '4092', '394': '4092'}, '35132': {'4092': '3312', '331j2': '331j2', '1040': '3312', '1090': '3312', '4399': '3312', '9083': '3312', '3024': '3312', '999': '3312', '2034': '3312', '301': '3312', '3312': '3312', '394': '3312'}, '301': {'4092': '4092', '331j2': '4092', '1040': '4092', '1090': '4092', '4399': '4092', '9083': '4092', '3024': '4092', '999': '4092', '2034': '4092', '35132': '4092', '394': '394', '3312': '4092'}, '3312': {'4092': '1090', '331j2': '35132', '1040': '1090', '1090': '1090', '4399': '1090', '9083': '1090', '3024': '1090', '999': '1090', '2034': '1090', '35132': '35132', '301': '1090', '394': '1090'}, '394': {'4092': '301', '331j2': '301', '1040': '301', '1090': '301', '4399': '301', '9083': '301', '3024': '301', '999': '301', '2034': '301', '35132': '301', '301': '301', '3312': '301'}})

if __name__ == '__main__':
	unittest.main()